{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Payment Fraud Detection Docs","text":"Online Payment Fraud Detection System <pre><code>A Comprehensive Study and Application\n</code></pre> <p>Dive into a groundbreaking exploration of fraud detection, where technology meets real-world application. Over two months of in-depth research and development have culminated in a robust system that tackles fraud across diverse domains.</p> <p>Start Application </p>"},{"location":"#fraud-prevention-in-online-transaction","title":"Fraud Prevention in online transaction","text":"<p>This web application helps users detect fraudulent activities in online payment transactions using advanced machine learning models. With an intuitive interface, users can input transaction details and quickly receive predictions about the likelihood of fraud. Whether you're an individual user or a financial professional, this tool provides an easy and effective way to assess transaction risks.</p> <p>The Online Payment Fraud Detection Application leverages cutting-edge machine learning techniques, including Principal Component Analysis (PCA) and XGBoost, to offer accurate fraud predictions. By reducing the number of input features through dimensionality reduction, the application provides a streamlined user experience without compromising accuracy.</p>"},{"location":"about/","title":"About the Application","text":"<p>The Online Payments Fraud Detection application predicts fraudulent transactions in online payment systems using advanced machine learning techniques. With the growing risk of online payment fraud, this model helps financial institutions and e-commerce platforms identify suspicious transactions in real-time.  </p>"},{"location":"about/#features","title":"Features","text":"<ol> <li>Real-Time Fraud Detection </li> <li>Detects fraud during transaction processing by analyzing transaction features like amount, origin, and time.  </li> <li> <p>Provides immediate feedback to help prevent fraudulent activities.  </p> </li> <li> <p>Interactive Interface </p> </li> <li>Powered by Streamlit, users can easily input transaction details to get predictions.  </li> <li> <p>Designed for accessibility and user-friendliness, ensuring a seamless experience.  </p> </li> <li> <p>Comprehensive Feature Engineering </p> </li> <li>Implements advanced preprocessing steps to clean and optimize transaction data.  </li> <li>Uses dimensionality reduction techniques like Principal Component Analysis (PCA) to improve model performance.  </li> </ol>"},{"location":"about/#how-it-works","title":"How It Works","text":"<p>The application leverages the XGBoost machine learning model to detect fraudulent transactions based on transaction attributes. Here\u2019s how it operates:  </p> <ul> <li>Data Preprocessing: Transaction data undergoes cleaning and feature scaling to ensure consistency.  </li> <li>Feature Selection: PCA reduces input dimensions, retaining only the most critical features.  </li> <li>Prediction: The trained XGBoost model evaluates transaction details to classify them as genuine or fraudulent.  </li> </ul> <p>This approach ensures accurate predictions while maintaining computational efficiency.  </p>"},{"location":"about/#key-highlights","title":"Key Highlights","text":"<ul> <li>Machine Learning Backbone: Powered by XGBoost, renowned for its accuracy and efficiency in handling imbalanced datasets.  </li> <li>AUC-ROC Performance: Achieves a score of 0.9556, demonstrating its reliability in fraud detection.  </li> <li>Seamless Integration: Can be embedded into existing payment systems for real-time fraud analysis.  </li> </ul>"},{"location":"fraud-insights/","title":"Fraud Insights","text":""},{"location":"fraud-insights/#understanding-fraud-patterns","title":"Understanding Fraud Patterns","text":"<p>Fraudulent transactions often exhibit distinct patterns that can help identify them. By analyzing transaction data, we can uncover insights that reveal common characteristics of fraudulent activities, such as:  </p> <ul> <li>Unusually High Transaction Amounts: Fraudulent transactions often involve abnormally large amounts.  </li> <li>Geographic Anomalies: Transactions originating from unexpected locations or mismatched billing and shipping addresses.  </li> <li>Time-Based Trends: Spikes in fraudulent activities during specific hours or days.  </li> </ul>"},{"location":"fraud-insights/#key-insights","title":"Key Insights","text":""},{"location":"fraud-insights/#1-transaction-amount-analysis","title":"1. Transaction Amount Analysis","text":"<p>Fraudulent transactions are more likely to deviate from the average transaction amount. For instance:  </p> <ul> <li>Transactions exceeding the 95th percentile often indicate suspicious activity.  </li> <li>Low-value transactions are sometimes used to test stolen card details.  </li> </ul>"},{"location":"fraud-insights/#2-geographic-discrepancies","title":"2. Geographic Discrepancies","text":"<p>Fraudulent transactions often involve:  </p> <ul> <li>Countries or regions flagged for high fraud rates.  </li> <li>IP addresses that do not match the user\u2019s stated location.  </li> </ul>"},{"location":"fraud-insights/#3-frequency-of-transactions","title":"3. Frequency of Transactions","text":"<p>Fraudsters may initiate multiple transactions within a short period. The system flags:  </p> <ul> <li>Rapid successive transactions from the same account or card.  </li> <li>Repeated declines followed by successful attempts.  </li> </ul>"},{"location":"fraud-insights/#4-time-based-transactions","title":"4. Time-Based Transactions","text":"<p>Fraudulent activities often exhibit specific timing patterns that can be indicative of malicious intent.  Examples include:</p> <ul> <li>Rapid Transactions: Fraudsters may initiate multiple transactions within short, consistent time intervals to exploit system vulnerabilities.</li> <li>Long-Term Repetition: Fraudulent transactions may be strategically spread out over an extended period, such as a month or more, to evade detection systems.</li> </ul>"},{"location":"fraud-insights/#fraud-trends-over-time","title":"Fraud Trends Over Time","text":"<p>Monitoring fraud trends enables us to adapt to evolving tactics used by fraudsters.  </p> <ul> <li>Year-on-Year Analysis: Track how fraud patterns change over time.  </li> <li>Adaptable Models: Incorporate new insights into model updates to stay ahead of emerging threats.  </li> </ul>"},{"location":"fraud-insights/#conclusion","title":"Conclusion","text":"<p>Analyzing fraud insights provides actionable intelligence to enhance security and reduce financial risks. By leveraging advanced analytics, visualization, and machine learning, our system continuously adapts to detect and prevent fraudulent transactions effectively.  </p>"},{"location":"getting-started/","title":"Building the application","text":""},{"location":"getting-started/#application-code","title":"Application Code","text":"Details of the UserDetails of the TransactionDetails of the CardBilling DetailsCustomer Behaviourial DetailsDevice Information User Details Code <pre><code>def userDetails():\n    st.subheader('Provide your details')\n\n    col1, col2 = st.columns(2)\n    with col1:\n        name = st.text_input(\"Enter your name\", key=\"name\", placeholder=\"John Doe\")\n    with col2:\n        age = st.number_input(\"Enter your age\", min_value=1, key=\"age\")\n\n    col3, col4 = st.columns(2)\n    with col3:\n        phone_extension = st.text_input(\"Enter your phone extension\", key=\"phone_extension\", placeholder=\"+91\")\n    with col4:\n        phone = st.text_input(\"Enter your phone number\", key=\"phone\", placeholder=\"1234567890\")\n    phone_no = f\"{phone_extension} {phone}\"\n\n    st.markdown(\"#### Your Home Address\")\n    col5, col6 = st.columns(2)\n    with col5:\n        street = st.text_input(\"Street\", key=\"street\", placeholder=\"123, Example Street\")\n    with col6:\n        city = st.text_input(\"City\", key=\"city\", placeholder=\"Example City\")\n    col7, col8, col9 = st.columns(3)\n    with col7:\n        state = st.text_input(\"State\", key=\"state\", placeholder=\"Example State\")\n    with col8:\n        country = st.text_input(\"Country\", key=\"country\", placeholder=\"Example Country\")\n    with col9:\n        postal_code = st.number_input(\"Postal Code\", min_value=10000, max_value=999999, step=1, value=123456, key=\"postal_code\")\n    my_address_data = {\"Street\": street, \"City\": city, \"State\": state, \"Country\": country, \"Postal Code\": postal_code}\n    my_address = f\"{street}, {city}, {state}, {country}, {postal_code}\"\n\n    if st.checkbox(\"Correspondence Address same as Home Address\", key=\"corr_address\"):\n        corr_address_data = my_address_data\n        corr_address = my_address\n    else:\n        st.markdown(\"#### Your Correspondence Address\")\n        col10, col11 = st.columns(2)\n        with col10:\n        corr_street = st.text_input(\"Street\", key=\"corr_street\", placeholder=\"123, Example Street\")\n        with col11:\n        corr_city = st.text_input(\"City\", key=\"corr_city\", placeholder=\"Example City\")\n        col12, col13, col14 = st.columns(3)\n        with col12:\n        corr_state = st.text_input(\"State\", key=\"corr_state\", placeholder=\"Example State\")\n        with col13:\n        corr_country = st.text_input(\"Country\", key=\"corr_country\", placeholder=\"Example Country\")\n        with col14:\n        corr_postal_code = st.number_input(\"Postal Code\", min_value=10000, max_value=999999, step=1, value=123456, key=\"corr_postal_code\")\n        corr_address_data = {\"Street\": corr_street, \"City\": corr_city, \"State\": corr_state, \"Country\": corr_country, \"Postal Code\": corr_postal_code}\n        corr_address = f\"{corr_street}, {corr_city}, {corr_state}, {corr_country}, {corr_postal_code}\"\n\n    st.divider() ############################################################################################################\n    return name, age, phone_no, my_address_data, my_address, corr_address_data, corr_address\n</code></pre> <pre><code>name, age, phone_no, my_address_data, my_address, corr_address_data, corr_address = userDetails()\n</code></pre> Transaction Details Code <pre><code>def transactionDetails(labels, my_address_data, my_address):\n    st.subheader('Provide the transaction details')\n\n    # For TransactionDT \n    START_DATE = '2017-12-01'\n    StartDate = datetime.datetime.strptime(START_DATE, \"%Y-%m-%d\")\n    col1, col2 = st.columns(2)\n    with col1:\n        TransactionDT_date = st.date_input(\"Transaction Date\", key=\"TransactionDT_date\")\n    with col2:\n        TransactionDT_time = st.time_input(\"Transaction Time\", step=60, key=\"TransactionDT_time\")\n    TransactionDateTime = datetime.datetime.combine(TransactionDT_date, TransactionDT_time)\n    TransactionDT = int((TransactionDateTime - StartDate).total_seconds())\n\n    # For TransactionID, TransactionAmt \n    cols = st.columns(2)\n    with cols[0]:\n        TransactionID = st.number_input(\"Transaction ID\", key=\"TransactionID\", min_value=1000000, max_value=999999999999, value=123456789012, placeholder=\"7-12 Digits\")\n    with cols[1]:\n        TransactionAmt = np.log(st.number_input(\"Transaction Amount\", min_value=0.1, value=1.0, step=1.0, key=\"TransactionAmt\"))\n\n    # For min_last, max_last, mean_last, std_last\n    min_last, max_last = st.slider(\"Your usual transaction amount range\", min_value=1, max_value=100000, value=(10500, 70000), step=10, key=\"min_max_last\")\n    mean_last = np.log(np.mean([min_last, max_last]))\n    std_last = mean_last / np.log(np.std([min_last, max_last]))\n\n    # For dist1\n    dist1 = st.slider(\"Distance from the home location (in km)\", min_value=0, max_value=10000, value=100, step=1, key=\"dist1\")\n\n    # For _Weekdays, _Hours, _Days \n    _Weekdays, _Hours, _Days = TransactionDateTime.weekday(), TransactionDateTime.hour, TransactionDateTime.day \n\n    # For ProductCD \n    ProductCD = labels[st.selectbox(\"What type of item is being purchased?\", [\"Widgets\", \"Clothing\", \"Retail\", \"Healthcare\", \"Subscription\"], key=\"ProductCD\").lower()[0]]\n\n    # For P_emaildomain, R_emaildomain\n    col3, col4 = st.columns(2)\n    with col3:\n        purchaser_email = st.text_input(\"Purchaser Email Address\", key=\"puchaser_email\", placeholder=\"user@example.example\")\n        P_emaildomain = purchaser_email.split('@')[-1] or 'nan'\n        if P_emaildomain not in list(labels.keys()):\n        P_emaildomain = 'nan'\n        P_emaildomain = labels[P_emaildomain]\n    with col4:\n        recipient_email = st.text_input(\"Recipient Email Address\", key=\"recipient_email\", placeholder=\"user@example.example\")\n        R_emaildomain = recipient_email.split('@')[-1] or 'nan'\n        if R_emaildomain not in list(labels.keys()):\n        R_emaildomain = 'nan'\n        R_emaildomain = labels[R_emaildomain]\n\n    col5, col6 = st.columns(2)\n    with col5:\n        tx_phone_extension = st.text_input(\"Enter the phone extension\", key=\"tx_phone_extension\", placeholder=\"+91\")\n    with col6:\n        tx_phone = st.text_input(\"Enter transaction phone number\", key=\"tx_phone\", placeholder=\"1234567890\")\n    tx_phone_no = f\"{tx_phone_extension} {tx_phone}\"\n\n    if st.checkbox(\"Transaction Address same as Home Address\", key=\"tx_address\", value=True):\n        tx_address_data = my_address_data\n        tx_address = my_address\n    else:\n        st.markdown(\"##### From where did you conduct your transaction?\")\n        col7, col8 = st.columns(2)\n        with col7:\n        tx_street = st.text_input(\"Street\", key=\"tx_street\", placeholder=\"123, Example Street\")\n        with col8:\n        tx_city = st.text_input(\"City\", key=\"tx_city\", placeholder=\"Example City\")\n        col9, col10, col11 = st.columns(3)\n        with col9:\n        tx_state = st.text_input(\"State\", key=\"tx_state\", placeholder=\"Example State\")\n        with col10:\n        tx_country = st.text_input(\"Country\", key=\"tx_country\", placeholder=\"Example Country\")\n        with col11:\n        tx_postal_code = st.number_input(\"Postal Code\", min_value=10000, max_value=999999, step=1, value=123456, key=\"tx_postal_code\")\n        tx_address_data = {\"Street\": tx_street, \"City\": tx_city, \"State\": tx_state, \"Country\": tx_country, \"Postal Code\": tx_postal_code}\n        tx_address = f\"{tx_street}, {tx_city}, {tx_state}, {tx_country}, {tx_postal_code}\"\n\n    # For addr1, addr2, first_value_addr1 \n    addr1 = float(str(tx_address_data['Postal Code'])[3:])\n    addr2 = float(str(tx_address_data['Postal Code'])[:3])\n    first_value_addr1 = float(str(tx_address_data['Postal Code'])[0])\n\n    st.divider() ############################################################################################################\n    return TransactionDT, TransactionID, TransactionAmt, mean_last, min_last, max_last, std_last, dist1, _Weekdays, _Days, _Hours, \\\n        ProductCD, purchaser_email, P_emaildomain, recipient_email, R_emaildomain, tx_phone_no, tx_address_data, tx_address, addr1, addr2, \\\n        first_value_addr1\n</code></pre> <pre><code>(TransactionDT, TransactionID, TransactionAmt, \nmean_last, min_last, max_last, std_last, dist1, \n_Weekdays, _Days, _Hours, ProductCD, \npurchaser_email, P_emaildomain, recipient_email, R_emaildomain, \ntx_phone_no, tx_address_data, tx_address, \naddr1, addr2, first_value_addr1) = transactionDetails(labels, my_address_data, my_address)\n</code></pre> Card Details Code <pre><code>def cardDetails(labels, TransactionAmt):\n    st.subheader(\"Provide the card details\")\n\n    # For Card_ID\n    cols = st.columns(5)\n    with cols[0]:\n        st.text_input(\"Card ID\", key=\"Card_ID\", label_visibility=\"hidden\", value=\"Card ID\", disabled=True)\n    with cols[1]:\n        card1 = st.text_input(\"Card ID 1\", key=\"card1\", label_visibility=\"hidden\", value=\"1000\", placeholder=\"1000\")\n        first_value_card1 = float(card1[0])\n    with cols[2]:\n        card2 = st.text_input(\"Card ID 2\", key=\"card2\", label_visibility=\"hidden\", value=\"5552\", placeholder=\"5552\")\n    with cols[3]:\n        card3 = st.text_input(\"Card ID 3\", key=\"card3\", label_visibility=\"hidden\", value=\"1835\", placeholder=\"1835\")\n    with cols[4]:\n        card5 = st.text_input(\"Card ID 5\", key=\"card5\", label_visibility=\"hidden\", value=\"2246\", placeholder=\"2246\")\n    Card_ID = f\"{card1} {card2} {card3} {card5}\"\n\n    # Card Holder Name\n    card_holder_name = st.text_input(\"Card Holder Name\", key=\"card_holder_name\", placeholder=\"John Doe\")\n\n    # For TransactionAmt_to_mean_card_id, TransactionAmt_to_mean_card1, TransactionAmt_to_mean_card4\n    max_limit = st.number_input(\"Maximum transaction limit of this card\", min_value=1, value=100000, step=10, key=\"max_limit\")\n    min_last, max_last = st.slider(\"Your usual transaction amount range through this card\", min_value=1, max_value=100000 if max_limit == 1 else max_limit, value=(1, max_limit), step=1, key=\"min_max_last_card\")\n    std_last = np.log(np.mean([min_last, max_last])) / np.log(np.std([min_last, max_last]))\n    TransactionAmt_to_mean_card_id = np.exp(TransactionAmt) - np.mean([min_last, max_last])\n    TransactionAmt_to_mean_card1 = np.exp(TransactionAmt) / np.mean([min_last, max_last])\n    TransactionAmt_to_mean_card4 = abs((np.exp(TransactionAmt) / np.mean([min_last, max_last])) - std_last)\n\n    # For card1, card2, card4 \n    payment_method = st.selectbox(\"Have you made the payment using a card?\", ['Select One', 'Yes', 'No'], key=\"payment_method\")\n    card4, card6 = -999, -999\n    if payment_method == 'Yes':\n        card4 = labels[st.selectbox(\"Brand of the card\", ['Visa', 'Mastercard', 'American Express', 'Discover'], key=\"card4\").lower()]\n        card6 = labels[st.selectbox(\"Usage of the card\", ['Credit', 'Debit', 'Debit or Credit', 'Charge Card'], key=\"card6\").lower()]\n    card_data = {\"Card1\": card1, \"Card2\": card2, \"Card3\": card3, \"Card4\": card4, \"Card5\": card5, \"Card6\": card6}\n\n    st.divider() ############################################################################################################\n    return card_data, Card_ID, first_value_card1, card_holder_name, TransactionAmt_to_mean_card_id, TransactionAmt_to_mean_card1, TransactionAmt_to_mean_card4\n</code></pre> <pre><code>(card_data, Card_ID, first_value_card1, card_holder_name, \nTransactionAmt_to_mean_card_id, TransactionAmt_to_mean_card1,\nTransactionAmt_to_mean_card4) = cardDetails(labels, TransactionAmt)\n</code></pre> Billing Details Code <pre><code>def billingDetails(purchaser_email, card_holder_name, name, phone_no, tx_phone_no, my_address, tx_address, country, tx_country):\n    st.subheader(\"Provide the billing details\")\n\n    # For M1, M4, M5, M6, M7 \n    # M1 -&gt; Billing Address == Shipping Address\n    M1 = st.selectbox(\"Is the billing address the same as the shipping address?\", ['Select One', 'Yes', 'No'], key=\"M1\")\n    M1 = 1 if M1 == 'Yes' else 2 if M1 == 'No' else -999\n\n    # M2 -&gt; Email Address (at T/X) == Email Address (Owner)\n    email_tx = st.text_input(\"Email Address at the Transaction Receipt\", key=\"email_tx\", placeholder=\"user@example.example\")\n    M2 = -999 if email_tx == '' or purchaser_email == '' else 1 if email_tx == purchaser_email else 2\n\n    # M3 -&gt; Card Holder Name == Name of the Owner\n    M3 = -999 if card_holder_name == '' or name == '' else 1 if card_holder_name == name else 2\n\n    # M4 -&gt; T/X from same device as last transaction\n    M4 = st.selectbox(\"Have you done the transaction from the same device as last time?\", ['Select One', 'Yes', 'No'], key=\"M4_device\")\n    if M4 == 'Yes':\n        M4 = st.selectbox(\"Have you done the transaction from a nearby home location?\", ['Select One', 'Yes', 'No'], key=\"M4_home\")\n        M4 = 4 if M4 == 'Yes' else 5 if M4 == 'No' else -999\n    elif M4 == 'No':\n        M4 = 3\n    else:\n        M4 = -999\n\n    # M5 -&gt; Phone Number (at T/X) == Phone Number of the Owner\n    M5 = -999 if phone_no == ' ' or len(phone_no) &lt; 14 or tx_phone_no == ' ' or len(tx_phone_no) &lt; 14 else 1 if phone_no == tx_phone_no else 2\n\n    # M6 -&gt; Address (at T/X) == Address of the Owner\n    M6 = -999 if my_address == \", , , , 123456\" or tx_address == \", , , , 123456\" else 1 if my_address == tx_address else 2\n\n    # M7 -&gt; Country (at T/X) == Country of the Owner\n    M7 = -999 if country == '' or tx_country == '' else 1 if country == tx_country else 2\n\n    M_data = {\"M1\": M1, \"M2\": M2, \"M3\": M3, \"M4\": M4, \"M5\": M5, \"M6\": M6, \"M7\": M7}\n    st.divider() ############################################################################################################\n    return M_data\n</code></pre> <pre><code>M_data = billingDetails(purchaser_email, card_holder_name, name, phone_no, \n                        tx_phone_no, my_address, tx_address,\n                        my_address_data['Country'], tx_address_data['Country'])\n</code></pre> Behaviourial Details Code <pre><code>def behavioralDetails(TransactionAmt, min_last, max_last, _Hours, my_address_data, tx_address_data):\n    # For V1, V12, V14, V35, V41, V65, V69, V75, V88, V94, V241\n    st.subheader(\"Provide the transactional usage details\")\n\n    cols = st.columns(3)\n    with cols[0]:\n        V1 = st.selectbox(\"Have you recently changed your account information?\", ['Select One', 'Yes', 'No'], key=\"V1\")\n        V1 = 1 if V1 == 'No' else 0\n    with cols[1]:\n        V14 = st.selectbox(\"Have you encountered any other fraud scenarios?\", ['Select One', 'Yes', 'No'], key=\"V14\")\n        V14 = 1 if V14 == 'No' else 0\n    with cols[2]:\n        V88 = st.selectbox(\"Is this transaction done from your own device?\", ['Select One', 'Yes', 'No'], key=\"V88\")\n        V88 = 1 if V88 == 'Yes' else 0\n\n    # Is the transaction amount significantly higher than the user's maximum?\n    V41 = 1 if (np.exp(TransactionAmt) &gt; max_last) else 0\n\n    # Was this transaction made within normal business hours?\n    V65 = 1 if (8 &lt;= _Hours &lt;= 18) else 0\n\n    # Is the user's transaction history within the expected range for their account?\n    V241 = 1 if (min_last &lt;= np.exp(TransactionAmt) &lt;= max_last) else 0\n\n    V94 = st.selectbox(\"What is the nature of your purchase history?\", ['Select One', 'Mostly small transactions', 'A mix of small and large transactions', 'Mostly large transactions'], key=\"V94\")\n    V94 = (0 if V94 == 'Mostly small transactions' else 1 if V94 == 'A mix of small and large transactions' else 2) / 2\n\n    # 0 Exactly the same address, 1 Same city but different street, 2 Same state but different city, 3 Same country but different state\n    V12 = abs(0 if my_address_data == tx_address_data else 1 if my_address_data['City'] == tx_address_data['City'] else 2 if my_address_data['State'] == tx_address_data['State'] else 3 if my_address_data['Country'] == tx_address_data['Country'] else -1) / 3\n\n    V35 = st.selectbox(\"How long has your account been active?\", ['Select One', 'Less than 1 month', '1-6 months', '6-12 months', 'More than a year'], key=\"V35\")\n    V35 = (0 if V35 == 'More than a year' else 1 if V35 == '6-12 months' else 2 if V35 == '1-6 months' else 3) / 3\n\n    V75 = st.selectbox(\"How often do you change your password?\", ['Select One', 'Less than once a year', 'Once a year', 'Every 6 months', 'Every 3 months', 'Monthly'], key=\"V75\")\n    V75 = (0 if V75 == 'Less than once a year' else 1 if V75 == 'Once a year' else 2 if V75 == 'Every 6 months' else 3 if V75 == 'Every 3 months' else 4) / 4\n\n    V69 = st.selectbox(\"How frequently do you make transactions online?\", ['Select One', 'Daily', 'Weekly', 'Bi-weekly', 'Monthly', 'Every few months', 'Rarely'], key=\"V69\")\n    V69 = (0 if V69 == 'Daily' else 1 if V69 == 'Weekly' else 2 if V69 == 'Bi-weekly' else 3 if V69 == 'Monthly' else 4 if V69 == 'Every few months' else 5) / 5\n\n    V_data = {\"V1\": V1, \"V12\": V12, \"V14\": V14, \"V35\": V35, \"V41\": V41, \"V65\": V65, \"V69\": V69, \"V75\": V75, \"V88\": V88, \"V94\": V94, \"V241\": V241}\n\n    # For C5, C6, C7, C9, C12, C14\n    st.divider() ############################################################################################################\n    time_tx = st.expander(\"Transaction Details\", expanded=True)\n    with time_tx:\n        st.markdown(\"&lt;div style='text-align: justify; margin: 1rem;'&gt;\\\n                    &lt;p style='margin-bottom: 5px;'&gt;Ranges of the transaction amount:&lt;/p&gt;\\\n                    &lt;b&gt;Small Transactions:&lt;/b&gt; 1 - 1000&lt;br /&gt;\\\n                    &lt;b&gt;Medium Transactions:&lt;/b&gt; 1000 - 20000&lt;br /&gt;\\\n                    &lt;b&gt;Large Transactions:&lt;/b&gt; 20000 - 100000&lt;br /&gt;\\\n                    &lt;b&gt;Very Large Transactions:&lt;/b&gt; 100000 - more than 100000&lt;br /&gt;\\\n                    &lt;/div&gt;\", unsafe_allow_html=True)\n\n    st.subheader(\"Provide the transactional behavior details\")\n    C7 = st.slider(\"How frequently do small transactions occur per day?\", min_value=0, max_value=100, value=5, step=1, key=\"C7\") / 2256\n    C12 = st.slider(\"How frequently do large transactions occur per day?\", min_value=0, max_value=10, value=2, step=1, key=\"C12\") / 3188\n\n    C6 = st.slider(\"How frequently do small transactions occur per week?\", min_value=0, max_value=1000, value=30, step=1, key=\"C6\") / 2252\n    C14 = st.slider(\"How frequently do large transactions occur per week?\", min_value=0, max_value=100, value=13, step=1, key=\"C14\") / 1429\n\n    C5 = st.slider(\"How frequently do small transactions occur per month?\", min_value=0, max_value=10000, value=200, step=1, key=\"C5\") / 376\n    C9 = st.slider(\"How frequently do large transactions occur per month?\", min_value=0, max_value=1000, value=30, step=1, key=\"C9\") / 572\n\n    C_data = {\"C5\": C5, \"C6\": C6, \"C7\": C7, \"C9\": C9, \"C12\": C12, \"C14\": C14}\n\n    # For D2, D3, D4, D5, D11\n    st.divider() ############################################################################################################\n    st.subheader(\"Provide the transaction time behavioral details\")\n\n    D2 = st.slider(\"How many days between small transactions?\", min_value=0, max_value=100, value=2, step=1, key=\"D2\") / 641\n    D11 = st.slider(\"How many days between medium transactions?\", min_value=0, max_value=365, value=15, step=1, key=\"D11\") / 936\n    D3 = st.slider(\"How many days between large transactions?\", min_value=0, max_value=730, value=40, step=1, key=\"D3\") / 1076\n    D5 = st.slider(\"How many days between very large transactions?\", min_value=0, max_value=730, value=80, step=1, key=\"D5\") / 1088\n    D4 = st.slider(\"How many days between exceptional transactions?\", min_value=0, max_value=1095, value=200, step=1, key=\"D4\") / 1213\n\n    D_data = {\"D2\": D2, \"D3\": D3, \"D4\": D4, \"D5\": D5, \"D11\": D11}\n    st.divider() ############################################################################################################\n    return V_data, C_data, D_data\n</code></pre> <pre><code>V_data, C_data, D_data = behavioralDetails(TransactionAmt, min_last, max_last, _Hours, my_address_data, tx_address_data)\n</code></pre> Device Info. Code <pre><code>def deviceInfo(labels):\n    st.subheader(\"Provide the device details\")\n\n    # For DeviceType\n    DeviceType = st.selectbox(\"Device Type\", ['Select One', 'Desktop', 'Mobile'], key=\"DeviceType\")\n    DeviceType = 1 if DeviceType == 'Desktop' else 2 if DeviceType == 'Mobile' else -999\n\n    # For DeviceInfo\n    DeviceInfo = st.selectbox(\"Device Info\", list(labels.keys()), key=\"DeviceInfo\")\n    DeviceInfo = labels[DeviceInfo]\n\n    device_data = {\"DeviceType\": DeviceType, \"DeviceInfo\": DeviceInfo}\n\n    st.divider() ############################################################################################################\n    return device_data\n</code></pre> <pre><code>device_data = deviceInfo(labels)\n</code></pre>"},{"location":"getting-started/#main-function-of-the-application","title":"Main Function of the Application","text":"<pre><code>def app():\n  st.write(\"This is a simple web app to predict whether a transaction is fraudulent or not.\")  \n  st.write(\"Please provide the necessary details to classify the transaction.\")\n\n  if st.button(\"Predict\"):\n    ...\n\n    st.toast(\"Pre-processing has started...\", icon=\"\u23f3\")\n    with st.spinner('Model is processing...'):\n        ...\n\n    st.toast(\"Pre-processing is complete...\", icon=\"\u2705\")\n\n    with results:\n      st.subheader(\"Results\")\n      st.toast(\"Model is working now...\", icon=\"\u23f3\")\n      with st.spinner('Model is processing...'):\n        ...\n\n      st.toast(\"Prediction is complete...\", icon=\"\u2705\")\n      try:\n        prediction = predict(data)\n        st.write(f'Hello {name}!')\n        st.write('Based on the machine learning model, the risk of this transaction being fraudulent is:')\n        if prediction[:,1] &gt;= 0.5:\n          st.error(\"**HIGH**\", icon=\"\ud83d\udeab\")\n          st.toast(\"The transaction is classified as fraudulent.\", icon=\"\ud83d\udeab\")\n        else:\n          st.success(\"**LOW**\", icon=\"\u2705\")\n          st.toast(\"The transaction is classified as non-fraudulent.\", icon=\"\ud83c\udf89\")\n\n      except:\n        st.error(\"Enter valid values to show the results.\", icon=\"\ud83d\udea8\")\n        st.toast(\"Oops... Something went wrong. Please try again.\", icon=\"\ud83d\udea8\")\n</code></pre>"},{"location":"getting-started/#online-payment-fraud-detector","title":"Online Payment Fraud Detector","text":"Powered By Streamlit <p>Accuracy of the Model</p> <p>The machine learning model used for prediction was initially evaluated on an unknown dataset  consisting of 506,691 records. The model correctly classified 89.54% of transactions as fraudulent and  88.66% of transactions as non-fraudulent. The model has an AUC-ROC score of 0.94. It also considers the cost of  misclassifying a non-fraudulent transaction as fraudulent, which is why the model is more likely to classify a transaction  as non-fraudulent rather than fraudulent.</p> <p>Disclaimer</p> <p>The results from this test are not intended for any financial or legal advice. The model was trained on 590,540 data points with personal attributes only. Additionally, the analysis of  this model indicates that attributes such as the transaction amount, maximum and minimum transaction limits,  and the distance of the transaction location are of high importance in determining if a transaction is fraudulent or not.</p>"},{"location":"how-to-use/","title":"How to Use","text":""},{"location":"how-to-use/#how-to-use-the-application","title":"How to Use the Application?","text":"Run the application <pre><code>Ready to detect fraud? Simply enter the required details in the application.\n</code></pre> <p>Click on the Start Application  button, and the model will provide a prediction of whether the transaction is fraudulent or not with proper explanations.</p> <p>Disclaimer</p> <p>The information and tools provided by this application are intended for educational and informational purposes only. The results and predictions generated by the machine learning models should not be used as the sole basis for making financial decisions or assessing risk. Users should exercise caution and consult with financial experts or professionals before acting on the information provided. The developer of this application does not assume any responsibility for any financial losses or damages that may result from the use of this tool. The accuracy of the predictions depends on the quality of the input data and the assumptions made during model training.</p>"},{"location":"how-to-use/#provide-all-these-details","title":"Provide all these details","text":"<p>Information</p> <p>Your data is completely safe and secure. This platform ensures there is no threat to the entered information. It is free from any risk or danger and follows the highest security standards to protect your privacy.</p> User Details Transaction Details Card Details Billing Details Transaction Usage Details Behavioral Details Device Details"},{"location":"how-to-use/#why-trust-us","title":"Why Trust Us?","text":"<ol> <li>Secure Environment: All entered data is processed safely with encryption protocols.  </li> <li>Privacy Protection: No sensitive information is stored or shared without consent.  </li> <li>Free from Risk: Our platform is free from threats and ensures user safety.  </li> <li>Transparency: You can view all details and understand how your data is utilized.  </li> </ol> <p>By focusing on user security and transparency, we aim to build trust and provide a reliable experience for you. \ud83d\ude80  </p>"},{"location":"model-building/","title":"Model Building","text":"Model Building <p>Our machine learning models are built using the IEEE-CIS Fraud Detection dataset, ensuring a robust foundation for detecting fraudulent transactions. On the model-building page, you'll find detailed insights into how the models were trained, the features used, and how they contribute to the predictions.</p>"},{"location":"model-building/#kaggle-notebook","title":"Kaggle Notebook","text":"<p>Kaggle Notebook</p>"},{"location":"model-overview/","title":"Model Development","text":"Challenges in Dataset"},{"location":"model-overview/#building-the-tx-dataset","title":"Building the T/X Dataset","text":"<pre><code>graph LR\n    A[Data Generation] --&gt; B[Generate Dataset]\n    B --&gt; C[Highly Imbalanced]\n    B --&gt; D[Contain both numerical &amp; categorical values]\n    B --&gt; E[Features to be time dependent]\n    B --&gt; F[Data must contain fraud scenarios]\n\n    A --&gt; G[Baseline Prediction Model]\n    G --&gt; H[Feature Transformation]\n    G --&gt; I[Predictive Modelling]\n\n    A --&gt; J[Apply it on Real-world Dataset]\n    J --&gt; K[IEEE-CIS Dataset]\n\n    A --&gt; L[Transaction Features]\n    L --&gt; M[Customer ID]\n    L --&gt; N[Transaction ID]\n    L --&gt; O[T/X Amount]\n    L --&gt; P[Date &amp; Time]\n    L --&gt; Q[Terminal ID]\n    L --&gt; R[Fraud Labels either 0 or 1]\n\n    A --&gt; S[Customer Profiles Generation]\n    S --&gt; T[Customer ID]\n    S --&gt; U[Geographical Location. Latitude &amp; Longitude]\n    S --&gt; V[Mean Amount, Standard Deviation Amount]\n    S --&gt; W[Mean Normal T/X per day]\n\n    A --&gt; X[T/X Generation Process]\n    X --&gt; Y[Generation of terminal profiles]\n    X --&gt; Z[Association of customer profiles to terminals]\n    X --&gt; AA[Generation of customer profiles]\n    AA --&gt; AB[Difference in spending habits]\n    AA --&gt; AC[Their Geographical location]\n    AA --&gt; AD[Spending frequency]\n    AA --&gt; AE[Spending Amounts]</code></pre> <ul> <li>Generate a dataset having, 5,000 customers, 10,000 terminals and 183 days of transactions.</li> <li>1,754,155 transactions will generated in processing time about 3 minutes.</li> </ul>"},{"location":"model-overview/#addition-of-fraud-scenarios","title":"Addition of Fraud Scenarios","text":"Fraud Scenario 1Fraud Scenario 2Fraud Scenario 3 <p>Any Transaction whose amount is more than 220 is a fraud.</p> <p>Everyday 2 terminals drawn at random and keep tracking upto next 28 days and considering them fraudulent.</p> <p>Everyday 3 customers are drawn at random.</p> <ul> <li>In next 14 days, 1/3rd of their transactions have multiplied by 5 and marked as fraudulent.</li> <li>All Card not present scenarios.</li> </ul> <ul> <li>Note: Adding fraudulent scenarios about 14,681 Transactions. The ratio of fraudulent and non-fraudulent is 0.8% of all transactions.  </li> <li>This generated dataset shows around 10,000 transactions per day. The number of fraudulent transactions per day is around 85, which is a significant figure.  </li> </ul>"},{"location":"model-overview/#feature-engineering","title":"Feature Engineering","text":""},{"location":"model-overview/#date-time-features","title":"Date &amp; Time features","text":"<p>Generating some more features and scenarios as shown below</p> <ul> <li>Weekdays  </li> <li>Weekends  </li> <li>Day  </li> <li>Night  </li> </ul>"},{"location":"model-overview/#customer-id-features","title":"Customer ID features","text":"<p>Transforming Customer ID to characterize customer behavior</p> <ul> <li>RFM (Recency, Frequency, Monetary) value.  </li> <li>Keep track of average spending amount &amp; number of transactions.  </li> <li>Creating 6 new features based on their behavior on working days, non-working days, vacations, and tours, etc.  </li> </ul>"},{"location":"model-overview/#method-used-for-transactions","title":"Method used for transactions","text":"<ol> <li> <p>Using cards:</p> <ul> <li>Lost cards  </li> <li>Skimming the cards  </li> <li>Ordered a new card on the wrong address  </li> </ul> </li> <li> <p>Without using cards:  </p> <ul> <li>Using Mobile/laptop and their versions  </li> <li>Using Net-banking / UPI / third-party apps  </li> <li>Loss of UPI PIN  </li> </ul> </li> </ol>"},{"location":"model-overview/#choosing-the-ieee-cis-dataset","title":"Choosing the IEEE-CIS Dataset","text":"<ul> <li>IEEE-CIS Fraud Detection dataset is a large-scale dataset that contains transaction data from an e-commerce platform.  </li> <li>The dataset includes a wide range of features, such as transaction amount, product category, and customer information.  </li> <li>This meets the criteria for building a robust fraud detection model and merging the generated dataset with the REAL WORLD dataset.  </li> <li>The dataset contains 590,540 transaction details of 393 different features in the training dataset.  </li> </ul>"},{"location":"model-overview/#working-on-the-dataset","title":"Working on the Dataset","text":"<ul> <li>After compiling the generated and IEEE-CIS dataset, there are many challenges in building the fraud detection model, such as:  <ul> <li>Imbalance dataset between fraud and non-fraud dataset.  </li> <li>Dealing with a huge number of features.  </li> <li>Selection of correct and most important features.  </li> <li>Handling missing values.  </li> <li>Scaling the features.  </li> </ul> </li> </ul> Model Flowchart"},{"location":"research-journey/","title":"Research and Journey","text":""},{"location":"research-journey/#nilson-report","title":"Nilson Report","text":"<p>Nilson Report is the most trusted source of news and analysis for the card and mobile payment industry. The latest Nilson Report from 2019 reveals that global card fraud losses reached $28.65 billion. Card fraud losses are projected to reach $35.31 billion by 2025, highlighting the urgent need for advanced fraud detection systems.</p> Nilson Report <p>Online payment fraud is a growing concern for businesses and consumers alike. As e-commerce continues to expand, fraudsters are finding new ways to exploit vulnerabilities in online transactions.  </p>"},{"location":"research-journey/#european-central-bank","title":"European Central Bank","text":"<p>European Central Bank (ECB) data shows that card fraud losses in the Single Euro Payments Area (SEPA) reached \u20ac1.55 billion in 2019. The ECB has been working to enhance payment security through the implementation of the Revised Payment Services Directive (PSD2).</p> European Central Bank Report <p>The PSD2 aims to improve the security of online payments and protect consumers from fraud. By requiring strong customer authentication for electronic transactions, the directive seeks to reduce the risk of fraud and enhance the overall security of the payment ecosystem.  </p>"},{"location":"research-journey/#well-known-pin-codes-advanced-techniques-biometric-identification","title":"Well Known PIN Codes | Advanced Techniques (Biometric identification)","text":""},{"location":"research-journey/#purpose","title":"Purpose","text":"<ol> <li>Automated systems should optimize the workload of fraud investigators.</li> <li> <p>Automated systems and human investigators work at different time scales:</p> <ul> <li> <p>Automated systems:  </p> <ul> <li>Usually provide risk scores for transactions in less than a second.</li> </ul> </li> <li> <p>Fraud investigators:  </p> <ul> <li>Usually require contacting a client to confirm a fraud, which can take days or weeks.</li> </ul> </li> </ul> </li> </ol>"},{"location":"research-journey/#scenarios","title":"Scenarios","text":"<pre><code>flowchart TD\n    A[Scenarios] --&gt; B[Card Present]\n    B --&gt; C[Lost or Stolen Card]\n    B --&gt; D[Card Not Received]\n    B --&gt; E[Counterfeited Card / Skimming]\n    A --&gt; G[Card Not Present]\n    G --&gt; H[Physical Card Not Present]\n    G --&gt; I[Payment performed on Internet]\n    I --&gt; J[Mail]\n    I --&gt; K[Mobile]\n    I --&gt; L[3rd Party Apps]</code></pre> <p>CP Scenarios have existed for more than 2 decades and are robust to fraud attacks, notably due to EMV (Europay Mastercard &amp; Visa) technology.  </p>"},{"location":"research-journey/#layer-diagram","title":"Layer Diagram","text":"<pre><code>flowchart TD\n    A[Layer Diagram] --&gt; B[Terminal Blocking Rules]\n    B --&gt; C[Within Milli-seconds]\n    A --&gt; D[Transaction Blocking Rules]\n    D --&gt; E[Before Authorization]\n    A --&gt; F[Scoring Rules]\n    F --&gt; G[Near Real time]\n    A --&gt; H[Data Driven Model]\n    H --&gt; I[To Block the Card]\n    A --&gt; J[Investigators / Human Intervention]\n    J --&gt; K[In Offline Mode]</code></pre> Layer Control Diagram <p>Investigators design transaction-blocking &amp; scoring rules layers.</p> <ol> <li>Check few alerts/day as the process is long &amp; tedious.  </li> <li>Investigate the wrong/false alarms raised by DDM (Data Driven Model) and reported back to real-time FDS (Fraud Detection System).</li> <li>High scores of DDM for fraud will pass the Investigators layers, and contact/send alerts using SMS.</li> </ol>"},{"location":"research-journey/#variation-in-transaction-data","title":"Variation in Transaction Data","text":"<pre><code>graph LR\n    A[Transaction Data] --&gt; B[Account Features]\n    B --&gt; C[Account Number]\n    B --&gt; D[Date of Account Opening]\n    B --&gt; E[Account Limit]\n    B --&gt; F[Card Limit]\n    B --&gt; G[Card Expiry Date]\n\n    A --&gt; H[Transaction Features]\n    H --&gt; I[T/X Refrence No.]\n    H --&gt; J[Account No.]\n    H --&gt; K[T/X Amount]\n    H --&gt; L[POS No.]\n    H --&gt; M[T/X Time]\n    H --&gt; N[Location]\n\n    A --&gt; O[Customer Features]\n    O --&gt; P[Customer ID No.]\n    O --&gt; Q[Type of Customer]\n    Q --&gt; R[Low Profile]\n    Q --&gt; S[High Profile]\n    O --&gt; T[Mobile No.]\n    O --&gt; U[Address]\n\n    A --&gt; V[Generate Dataset]\n    V --&gt; W[Highly Imbalanced]\n    V --&gt; X[Contain both numerical &amp; Categorical values]\n    V --&gt; Y[Feature time dependent fraud scenarios]\n\n    A --&gt; Z[Transaction Process]\n    Z --&gt; AA[Difference in spending habits]\n    Z --&gt; AB[Their geographical location]\n    Z --&gt; AC[Spending frequency]\n    Z --&gt; AD[Spending Amounts]\n    Z --&gt; AE[Spending Date &amp; Time]</code></pre>"},{"location":"resources/","title":"Technical Resources","text":"Fraud Detection Handbook Kaggle Notebook Handwritten Notes Medium Blog IEEE-CIS Dataset"}]}